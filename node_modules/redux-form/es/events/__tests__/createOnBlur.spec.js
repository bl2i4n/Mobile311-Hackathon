import _noop from 'lodash-es/noop';
import expect, { createSpy } from 'expect';

import createOnBlur from '../createOnBlur';

var prepend = function prepend(value) {
  return 'normalized-' + value;
};

describe('createOnBlur', function () {
  it('should return a function', function () {
    expect(createOnBlur()).toExist().toBeA('function');
  });

  it('should return a function that calls blur with name and value', function () {
    var blur = createSpy();
    var normalize = createSpy(prepend).andCallThrough();
    createOnBlur(blur, normalize)('bar');
    expect(normalize).toHaveBeenCalled().toHaveBeenCalledWith('bar');
    expect(blur).toHaveBeenCalled().toHaveBeenCalledWith('normalized-bar');
  });

  it('should return a function that calls blur with name and value from event', function () {
    var blur = createSpy();
    var normalize = createSpy(prepend).andCallThrough();
    createOnBlur(blur, normalize)({
      target: {
        value: 'bar'
      },
      preventDefault: _noop,
      stopPropagation: _noop
    });
    expect(normalize).toHaveBeenCalled().toHaveBeenCalledWith('bar');
    expect(blur).toHaveBeenCalled().toHaveBeenCalledWith('normalized-bar');
  });

  it('should return a function that calls blur and then afterBlur with name and value', function () {
    var blur = createSpy();
    var normalize = createSpy(prepend).andCallThrough();
    var afterBlur = createSpy();
    createOnBlur(blur, normalize, afterBlur)('bar');
    expect(blur).toHaveBeenCalled();
    expect(normalize).toHaveBeenCalled();
    expect(afterBlur).toHaveBeenCalled().toHaveBeenCalledWith('normalized-bar');
  });
});